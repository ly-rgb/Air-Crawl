import json
from airline.base import AirAgentV3Development
from robot import HoldTask
from utils.searchparser import SearchParam
from utils.log import spider_BF_logger
import traceback
from datetime import datetime
from py_mini_racer import MiniRacer



class ABFWeb(AirAgentV3Development):
    '''
    proxies_type=7 该代理失败率高，可以尝试不挂
    '''

    def __init__(self, proxies_type=0, retry_count=3, timeout=60, holdTask=None):
        super().__init__(proxies_type, retry_count, timeout)
        self.holdTask: HoldTask = holdTask
        self.search_response = None

    def search(self, searchParam: SearchParam):
        self.number = searchParam.adt
        try:
            start_date = searchParam.date
            # end_date = searchParam.date
            if "CRAWlLCC" in searchParam.args:
                pass
            get_ticket_url = "https://www.frenchbee.com/en?ajax_form=1&_wrapper_format=drupal_ajax"
            data = {
                'visible_newsearch_flights_travel_type': 'O',
                'visible_newsearch_flights_from': searchParam.dep,
                'visible_newsearch_flights_to': searchParam.arr,
                'adults-count': '1',
                'children-count': '0',
                'dob[children][1]': '',
                'dob[children][2]': '',
                'dob[children][3]': '',
                'dob[children][4]': '',
                'dob[children][5]': '',
                'dob[children][6]': '',
                'dob[children][7]': '',
                'dob[children][8]': '',
                'dob[children][9]': '',
                'infants-count': '0',
                'um_youth-count': '0',
                'visible_newsearch_flights_departure_date': datetime.strptime(start_date, "%Y-%m-%d").strftime(
                    "%m/%d/%Y"),
                'visible_newsearch_flights_return_date': '',
                'newsearch_flights_travel_type': 'O',
                'newsearch_flights_from': searchParam.dep,
                'newsearch_flights_to': searchParam.arr,
                'newsearch_flights_departure_date': start_date,
                'newsearch_flights_return_date': '',
                'element_prefix': 'newsearch_flights_',
                'AB_SOLUTION': '',
                'newsearch_flights_passenger_ADT': searchParam.adt,
                'newsearch_flights_passenger_CHD': '0',
                'newsearch_flights_passenger_INF': '0',
                'newsearch_flights_passenger_UMZZ': '0',
                'newsearch_flights_passenger_UM': '0',
                'birthdate_um_1': '',
                'birthdate_um_2': '',
                'birthdate_um_3': '',
                'birthdate_um_4': '',
                'birthdate_um_5': '',
                'birthdate_um_6': '',
                'birthdate_um_7': '',
                'birthdate_um_8': '',
                'birthdate_um_9': '',
                'form_build_id': '',
                'form_id': 'frenchbee-amadeus-search-flights-form',
                # '_triggering_element_name': 'op',
                '_triggering_element_value': 'Find my flight',
                # '_drupal_ajax': '1',
                # 'ajax_page_state[theme]': 'bl_desktop',
                # 'ajax_page_state[theme_token]': 'JTH4YaJ0opurYsQFDmKC0Ib-gt7T1A6CmKjjzV8lElM',
                'ajax_page_state[libraries]': 'bl_main/global-styling,bl_newsletter/validation,core/html5shiv,core/jquery.form,frenchbee_amadeus/cleave_js,frenchbee_amadeus/frenchbee_amadeus,paragraphs/drupal.paragraphs.unpublished,select2/select2.i18n.en,system/base,views/views.module'
            }
            headers = {
                'Host': 'www.frenchbee.com',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36',
            }
            res_ = self.post(url=get_ticket_url, headers=headers, data=data)
            if res_.status_code == 200:
                if len(res_.json()) < 2:
                    self.ticket_html = ''
                    return
                ticket_req_details = res_.json()[2]['data']
            else:
                raise Exception('ticket_req_details获取失败..')
            req_html = self.etree.HTML(ticket_req_details)
            names = req_html.xpath('//input/@name')
            values = req_html.xpath('//input/@value')
            ticket_payload = dict(zip(names, values))
            get_token_url = 'https://vols.frenchbee.com/Both-Who-what-it-vs-euen-auoid-to-got-fly-ith-Pr?d=vols.frenchbee.com'
            headers = {
                'Accept': '*/*',
                'Accept-Encoding': 'deflate, gzip, br',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36',
            }
            token_data = {"solution":{"interrogation":{"p":"","st":1663916836,"sr":2429427376,"cr":788317469},"version":"stable"},"old_token":"3:7Yv77Yq63jrfVImkEMLgNQ==:UzjviYavIs4mU/Pae0doecoSGgQ7IRxWnpAIoG2bkLXAyzEPEw79ynWfR+05j17mOqmzDXZAIj3LsnEKZsuE+XCrd+lUTfocumITTYGdp+hyb4k2unRF3d3Bx8JWcz5Cc/Ix5WCAZ7jkJU7yIRpPjlRhuA9bciyB+i6B6oIp1Ey0q3CVscU8XrnraIEG1MY/y6zX2MFeB8rpcMYCDo/zwwBux2eGPbFQfdPPfiVipoT86njCyFbwAjkaFDvoDeXpVuj8s1Ehu0j15eSQ4yd0xyIQJkoG5jiRIFibIEuWTJof6s3OV0LWtZ/WI2g7zwzORWr6/4ChwYKcjIRBjCkTSTjshjKR6lZuGiWVHKRZ4zBjju1B/fUl1VkIFw+g4CrYpAI1Mh0pB+VU1is5KHLaQ7VGJkiRroyCAu2elHVIwqgWj40gXdjJgT7Fv5ABl6Ipx+VVnPnlZyBhZQM5IwTY5026gJZICvH/Lf82wSoWXUcqzkyuD3qgHqFKDnw+iDlB:DENJmP0nip/JopnwN8TSBS5kMzW9kEMq6URRZvoultU=","error":None,"performance":{"interrogation":203}}
            token_res = self.post(url=get_token_url, headers=headers, data=json.dumps(token_data))
            if token_res.status_code == 200:
                token = token_res.json()['token']
            else:
                raise Exception('token获取失败..')
            ticket_url = 'https://vols.frenchbee.com/plnext/bf-dx/Override.action'
            headers = {
                'Host': 'vols.frenchbee.com',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
                'Origin': 'https://vols.frenchbee.com',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                'Referer': 'https://vols.frenchbee.com/plnext/bf-dx/Override.action',
                'Accept-Encoding': 'gzip, deflate, br',
                'Cookie': 'reese84={}'.format(token),
            }
            ticket = self.post(url=ticket_url, headers=headers, data=ticket_payload)
            if ticket.status_code == 200:
                self.ticket_html = ticket.text
            else:
                raise Exception('ticket_html获取失败..')


        except Exception as e:
            spider_BF_logger.error(f"请求失败, 失败结果：{e}")
            spider_BF_logger.error(f"{traceback.format_exc()}")

    def convert_search(self):
        result = []
        try:
            if self.ticket_html == '':
                return result
            html = self.etree.HTML(self.ticket_html)
            script = html.xpath('/html/body/script[1]/text()')[0]
            ctx = MiniRacer()
            env = "window=this;var aria={core:{AppEnvironment:{setEnvironment:function(){}},DownloadMgr:{updateRootMap:function(){}},IOFiltersMgr:{addFilter:function(){}}},IOFiltersMgr:{addFilter:function(){}}},Aria={load:function(n){n.oncomplete()}},plnextv2={utils:{requestManager:{CustomResourcesFilter:function(){}},HtmlUtils:{setLoadingMessage:function(){},setLoadingEndMessage:function(){}},pageProvider:{PlnextPageProvider:{init:function(n){window.info=n}}}}},cse={pageEngine:{CustomPageEngine:function(){this.start=function(n){}}}};function get_info(){return window.info};"
            ctx.eval(env + script)
            info = ctx.call('get_info')

            try:
                Availability = info['config']['pageDefinitionConfig']['pageData']['business']['Availability']
            except:
                return []
            for j, i in enumerate(Availability['proposedBounds'][0]['proposedFlightsGroup']):
                ep_data = {
                    'data': '',
                    'productClass': 'ECONOMIC',
                    'fromSegments': [],
                    'cur': '',
                    'adultPrice': 999999,
                    'adultTax':1,
                    'childPrice': 0,
                    'childTax': 0,
                    'promoPrice': 0,
                    'adultTaxType': 0,
                    'childTaxType': 0,
                    'priceType': 0,
                    'applyType': 0,
                    'max': 0,
                    'limitPrice': True,
                    'info': ""
                }
                ep_data['cur'] = Availability['currencyBean']['code']
                ep_data['adultPrice'] = (float(Availability['cube']['bestCombinationPrice']))/int(self.number)-1
                ep_data['max'] = Availability['cube']['bounds'][0]['fareFamilyList'][j]['flights']['0']['flight']['numberOfSeatsLeft']
                segments = i['segments']
                segs = []
                for seg in segments:
                    sg = {
                        'carrier': '',
                        'flightNumber': '',
                        'depAirport': '',
                        'depTime': '',
                        'arrAirport': '',
                        'arrTime': '',
                        'codeshare': False,
                        'cabin': 'Y',
                        'num': 0,
                        'aircraftCode': '',
                        'segmentType': 0
                    }
                    if ('listLegs' in seg):
                        break
                    sg['carrier'] = seg['airline']['code']
                    sg['flightNumber'] = seg['airline']['code'] + seg['flightNumber']
                    sg['depAirport'] = seg['beginLocation']['locationCode']
                    sg['depTime'] = datetime.strptime(seg['beginDate'], "%b %d, %Y %I:%M:%S %p").strftime("%Y%m%d%H%M")
                    sg['arrAirport'] = seg['endLocation']['locationCode']
                    sg['arrTime'] = datetime.strptime(seg['endDate'], "%b %d, %Y %I:%M:%S %p").strftime("%Y%m%d%H%M")
                    sg['aircraftCode'] = seg['equipment']['code']
                    segs.append(sg)
                ep_data['data'] = '/'.join([i['flightNumber'] for i in segs])
                ep_data['fromSegments'] = segs
                result.append(ep_data)
            return result

        except Exception:
            spider_BF_logger.error("解析数据失败，请查看json结构")
            spider_BF_logger.error(f"{traceback.format_exc()}")
